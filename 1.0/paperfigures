open_audio_device();		//pick a device
set_parameters();		//set up options

while(!done)			//start audio stream
{
	audio_callback_fcn();	//to read/write data
}

close_audio_device();		//free up device for other applications


for(int f = 0; f < num_samples; f++)
{
	for(int n = 0; n < num_samples; n++)
	{
		X[f] += x[n] * exp(f);
	}
}

polar( 1, (-2*pi*n*f)/N );


complex* FFT( complex x, num_samples )
{
	complex* X = new complex[num_samples];
	
	if ( num_samples == 1 )					//base case
	{
		X[0] = x[0];
		return X;
	}
	else
	{
		complex* even = new complex[num_samples/2];
		complex* odd  = new complex[num_samples/2];
		
		for(n = 0; n < num_samples/2; n++)		//split the data into
		{						//even and odd terms
			even[n] = x[2*n];
			odd[n]  = x[2*n+1];
		}
		
		EVEN = FFT( even, num_samples/2 );		//recursive calls
		ODD  = FFT( odd , num_samples/2 );	
		
		delete [] even;
		delete [] odd;	
		
		for(f = 0; f < num_samples/2; f++)		//combine terms
		{
			ODD[k] 	= ODD[k] * polar(1, -(2*PI*f)/N));
			X[k]	= EVEN[k] + ODD[k];
			X[k+N/2]= EVEN[k] - ODD[k];
		}
		
		delete [] EVEN;
		delete [] ODD;
		
		return X;
	}
}
		
		
	
		
